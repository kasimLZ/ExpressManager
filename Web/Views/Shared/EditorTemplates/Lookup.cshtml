@using Common.Attributes;
@using System.Reflection;
@using System.Collections;
@using System.ComponentModel.DataAnnotations.Schema
@{

    var lookupId = Html.NameForModel().ToString().Replace(".", "_");
    var fullModel = ViewData["FullModel"];
    var propInfo = fullModel.GetType().GetProperty(Html.NameForModel().ToString());
    var lookup_set = propInfo.GetCustomAttribute<LookupAttribute>();

    IEnumerable<string> items = lookup_set.Multi ?
        (Model is string ? Model.ToString().Split(lookup_set.Split) : (Model as IEnumerable)?.ConvertIEnumerable<string>()) :
        new string[] { Model?.ToString() };


    var showName = (!lookup_set.Multi && fullModel != null && !string.IsNullOrEmpty(lookup_set.Value))
                ? ObjectUtils.GetPropValue(fullModel, lookup_set.Value)
                : (ViewData.ContainsKey(lookupId + "Name")
                    ? ViewData[lookupId + "Name"]
                    : Request[lookupId + "Name"]);
    if (items == null) { goto TraslateNull; }
    if (showName == null && (lookup_set.Mode & TranslatMode.Dict) != 0)
    {
        IDictionary<string,string> dict = ViewData[propInfo.Name + "_Name"] as IDictionary<string, string>;
        if (dict != null)
        {
            showName = string.Join(", ", items.Select(a => dict.ContainsKey(a) ? dict[a] : string.Empty));
        }
    }
    if (showName == null && (lookup_set.Mode & TranslatMode.Property) != 0)
    {
        if (lookup_set.Multi)
        {
            var datafor = propInfo.GetCustomAttribute<DataForAttribute>();
            if (datafor != null && !string.IsNullOrEmpty(datafor.DataScoure) && !string.IsNullOrEmpty(datafor.ShowName))
            {
                showName = string.Join(", ", fullModel.GetEnumerableValue(datafor.DataScoure, datafor.ShowName) ?? new string[0]);
            }
        }
        else
        {
            if (showName == null && fullModel != null && !string.IsNullOrEmpty(lookup_set.Value))
            {
                var fk = propInfo.GetCustomAttribute<ForeignKeyAttribute>();
                showName = ObjectUtils.GetPropValue(fullModel, fk == null ? lookup_set.Value : (fk.Name + "." + lookup_set.Value));
            }
            if (showName == null) { showName = Model; }
        }
    }
    TraslateNull:
}

<div class="input-group" @Html.Raw(lookup_set.LinkModel != LookupLink.None ? "data-init-component=\"lookup\"" : "")>
    @if (items != null)
    {
        foreach (var i in items)
         {
             <input type="hidden" name="@(lookupId)" value="@(i)"/>
         }
    }
   
    <input id="@(lookupId)Name" name="@(lookupId)Name" type="text" class="form-control input-lookup" readonly="readonly" value="@showName">
    <span class="input-group-btn">
        <button id="@(lookupId)-Btn-Search" type="button" class="btn btn-success btn-lookup" data-url="@Url.LookupUrl(lookup_set, lookupId)" data-name-field="@lookup_set.Value" data-key-field="@lookup_set.Key">选择</button>
    </span>
</div>